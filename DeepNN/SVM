from sklearn import svm
from sklearn import metrics
from sklearn.pipeline import make_pipeline
from sklearn.preprocessing import StandardScaler
from sklearn.preprocessing import MinMaxScaler
import DataReading as DR
X_train,t_train = DR.readData("train")
X_test,t_test = DR.readData("test")
def classify(t):
  T = []
  for CDM in t:
    if CDM>-6:
        T.append(1)
    else:
        T.append(0)
  return T
T_train = classify(t_train)
T_test = classify(t_test)
clf = make_pipeline(StandardScaler(),svm.SVC(kernel='rbf', class_weight='balanced', C=1.0, gamma='auto',))
clf.fit(X_train,T_train)
T_pred = clf.predict(X_test)
print("Accuracy:",metrics.accuracy_score(T_test, T_pred))
print("Precision:",metrics.precision_score(T_test, T_pred))
print("Recall:",metrics.recall_score(T_test, T_pred))
def MSE(T_test,T_pred):
    sum = 0
    N = 0
    for i in range(len(T_test)):
      if T_test[i] == 1 and T_pred[i] == 0:
        sum += (10**(t_test[i])-10**(-6))**2
        N += 1
    return sum/N
print("MSE:",MSE(T_test,T_pred))
def Score(MSE,precision,recall):
  F = (1+2**2)*precision*recall/(2**2*precision+recall)
  return MSE/F
print("Score:",Score(MSE(T_test,T_pred),metrics.precision_score(T_test, T_pred),metrics.recall_score(T_test, T_pred)))